lib <- ggplot(data_adobe, aes(x = election, y = candidates )) +
theme_bw() + geom_jitter() + geom_smooth()
lib
lib <- ggplot(data_adobe, aes(x = election, y = candidates )) +
theme_bw() + geom_jitter(alpha= 0.2) + geom_smooth()
lib
lib <- ggplot(data_adobe, aes(x = election, y = liberal_candidates )) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, colour = "red")
lib
lib <- ggplot(data_adobe, aes(x = election, y = liberal_seat )) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, colour = "red")
lib
data <- rbind(data_adobe, data_hathi)
lib <- ggplot(data, aes(x = election, y = liberal_seat, colour = method)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, line.type = 2)
lib
data_hathi$liberal_seat <- as.numeric( data_hathi$liberal_votes > data_hathi$conservative_votes )
data_hathi$liberal_seat[data_hathi$unopposed_party == "l"] <- 1
lib <- ggplot(data, aes(x = election, y = liberal_seat, colour = method)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, line.type = 2)
lib
data_hathi$liberal_seat <- as.numeric( data_hathi$liberal_votes > data_hathi$conservative_votes )
lib <- ggplot(data, aes(x = election, y = liberal_seat, colour = method)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, line.type = 2)
lib
lib <- ggplot(data, aes(x = election, y = liberal_seat, colour = method)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, type = 2)
lib
summary(data_hathi$liberal_seat)
summary(data_adobe$liberal_seat)
summary(data_hathi$liberal_votes)
summary(data_adobe$liberal_votes)
summary(data_hathi$conservative_votes)
data_hathi$liberal_seat <- as.numeric( data_hathi$liberal_votes > data_hathi$conservative_votes )
data_hathi$liberal_seat[data_hathi$unopposed_party == "l"] <- 1
summary(data_hathi$liberal_seat)
txt_adobe$merge <- paste( txt_adobe$county, as.character(txt_adobe$election), sep = " ")
data_adobe$merge <- paste( data_adobe$county, as.character(data_adobe$election), sep = " ")
data_hathi$merge <- paste( data_hathi$county, as.character(data_hathi$election), sep = " ")
# Mergeing
data <- merge(data_adobe, data_hathi, by = "merge", all = TRUE)
summary(data)
plot(data$liberal_seat.x, data$liberal_seat.y)
# Checking data quality
test <- lm(liberal_seat.x ~ liberal_seat.y, data)
summary(test)
# Checking data quality
test <- lm(liberal_vote.x ~ liberal_vote.y, data)
# Checking data quality
test <- lm(liberal_votes.x ~ liberal_votes.y, data)
summary(test)
# Checking data quality
test <- ggplot(data, aes(x = log(liberal_votes.x + 1 ), y = log(liberal_votes.y +1))) + geom_point() + theme_bw()
test
# Checking data quality
test <- ggplot(data, aes(x = log(liberal_votes.x ), y = log(liberal_votes.y ))) + geom_point() + theme_bw()
test
# Checking data quality
test <- ggplot(data, aes(x = log(liberal_votes.x ), y = log(liberal_votes.y ))) + geom_point(alpha = 0.1) + theme_bw()
test
lib <- ggplot(data, aes(x = election, y = liberal_seat)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, type = 2)
lib
data <- rbind(data_adobe, data_hathi)
lib <- ggplot(data_adobe, aes(x = election, y = liberal_seat)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, type = 2)
lib
# generating variable IDs
data_adobe$merge <- paste( data_adobe$county, as.character(data_adobe$election), sep = " ")
data_hathi$merge <- paste( data_hathi$county, as.character(data_hathi$election), sep = " ")
# Mergeing
data <- merge(data_adobe, data_hathi, by = "merge", all = TRUE)
# Checking data quality
test <- ggplot(data, aes(x = log(liberal_votes.x ), y = log(liberal_votes.y ))) + geom_point(alpha = 0.1) + theme_bw()
test
# generating variable IDs
data_adobe$merge <- paste( as.character(data_adobe$page), as.character(data_adobe$election), sep = " ")
data_hathi$merge <- paste( as.character(data_hathi$page), as.character(data_hathi$election), sep = " ")
# Mergeing
data <- merge(data_adobe, data_hathi, by = "merge", all = TRUE)
# Checking data quality
test <- ggplot(data, aes(x = log(liberal_votes.x ), y = log(liberal_votes.y ))) + geom_point(alpha = 0.1) + theme_bw()
test
nrow(subset(data$liberal_votes.x == data$liberal_votes.y))
nrow(subset(data, liberal_votes.x == liberal_votes.y))
nrow(subset(data, liberal_votes.x == liberal_votes.y)) / nrow(data)
nrow(subset(data, liberal_votes.x == liberal_votes.y)) / nrow( subset(data, method == "adobe")  )
nrow(subset(data, liberal_votes.x == liberal_votes.y)) / nrow(subset(data, method.x == "adobe"))
nrow(subset(data, liberal_votes.x == liberal_votes.y)) / 5822
nrow(subset(data, liberal_votes.x == liberal_votes.y & !is.na(liberal_votes.x))) / 5822
nrow(subset(data, liberal_share.x == liberal_share.y & !is.na(liberal_share.x))) / 5822
head(data)
data$election <- NA
data$election <- NA
data$election[data$election.x == data$election.y] <- data$election.x
data$election[data$election.x == data$election.y] <- data$election.x[data$election.x == data$election.y]
data$election[which(data$election.x == data$election.y) ] <- data$election.x[data$election.x == data$election.y]
data$election[which(data$election.x == data$election.y) ] <- data$election.x[which(data$election.x == data$election.y)]
summary(data$election)
which(data$election.x == data$election.y)
which(data$election.x != data$election.y)
which(data$election.x != data$election.y)
head(data_election)
which(is.na(data$election.y))
which(is.na(data$election.x))
summary(as.factor(data$election.x))
varlist <- unique( gsub("\\.x|\\.y" , colnames(data[,2:ncol(data)]) ) )
varlist <- unique( gsub("\\.x|\\.y" , unlist(colnames(data[,2:ncol(data)])) ) )
colnames(data[,2:ncol(data)])
gsub("\\.x|\\.y" , colnames(data[,2:ncol(data)]))
gsub("\\.x|\\.y" , "", colnames(data[,2:ncol(data)]))
varlist <- unique( gsub("\\.x|\\.y" , "", colnames(data[,2:ncol(data)]))  )
for(var in varlist){
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data$var <- NA
good <- which(data$varx == data$vary)
xbetter <- which(is.na(data$vary))
ybetter <- which(is.na(data$varx))
data$var[good] <- data$varx[good]
data$var[xbetter] <- data$varx[xbetter]
data$var[ybetter] <- data$vary[ybetter]
}
data$eval(var)
var <- election
var <- "election:
1
""
"
var <- "election"
data$eval(var)
data$var
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data$var <- NA
good <- which(data$varx == data$vary)
xbetter <- which(is.na(data$vary))
data$vary
vary
data$eval(vary)
data$paste(vary)
paste(vary)
eval(vary)
xbetter <- which(is.na(data[,vary]))
ybetter <- which(is.na(data[,varx]))
data$var[good] <- data$varx[good]
data$var[xbetter] <- data$varx[xbetter]
for(var in varlist){
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(data[,varx] == data[,vary])
xbetter <- which(is.na(data[,vary]))
ybetter <- which(is.na(data[,varx]))
data$var[good] <- data$varx[good]
data$var[xbetter] <- data[xbetter,varx]
data$var[ybetter] <- data[ybetter,vary]
}
for(var in varlist){
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(data[,varx] == data[,vary])
xbetter <- which(is.na(data[,vary]))
ybetter <- which(is.na(data[,varx]))
data$var[good] <- data[good,varx]
data$var[xbetter] <- data[xbetter,varx]
data$var[ybetter] <- data[ybetter,vary]
}
for(var in varlist){
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(as.character(data[,varx]) == as.character(data[,vary]))
xbetter <- which(is.na(data[,vary]))
ybetter <- which(is.na(data[,varx]))
data$var[good] <- data[good,varx]
data$var[xbetter] <- data[xbetter,varx]
data$var[ybetter] <- data[ybetter,vary]
}
libnew <- ggplot(data, aes(x = election, y = liberal_seat)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, type = 2)
libnew <- ggplot(data, aes(x = election, y = liberal_seat)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, colour = "red")
libnew
head(data)
var= "election"
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(as.character(data[,varx]) == as.character(data[,vary]))
xbetter <- which(is.na(data[,vary]))
ybetter <- which(is.na(data[,varx]))
data[good,varx]
data$var[good] <- data[good,varx]
data$var[xbetter] <- data[xbetter,varx]
data[xbetter,var] <- data[xbetter,varx]
data[ybetter,var] <- data[ybetter,vary]
varlist <- unique( gsub("\\.x|\\.y" , "", colnames(data[,2:ncol(data)]))  )
for(var in varlist){
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(as.character(data[,varx]) == as.character(data[,vary]))
xbetter <- which(is.na(data[,vary]))
ybetter <- which(is.na(data[,varx]))
data[good,var] <- data[good,varx]
data[xbetter,var] <- data[xbetter,varx]
data[ybetter,var] <- data[ybetter,vary]
}
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(as.character(data[,varx]) == as.character(data[,vary]))
xbetter <- which(is.na(data[,vary]))
good <- which(as.character(data[,varx]) == as.character(data[,vary]))
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(as.character(data[,varx]) == as.character(data[,vary]))
data$election.x
varx
var<-"election"
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(as.character(data[,varx]) == as.character(data[,vary]))
xbetter <- which(is.na(data[,vary]))
ybetter <- which(is.na(data[,varx]))
data[good,var] <- data[good,varx]
data[xbetter,var] <- data[xbetter,varx]
data[ybetter,var] <- data[ybetter,vary]
varlist <- unique( gsub("\\.x|\\.y" , "", colnames(data[,2:ncol(data)]))  )
for(var in varlist){
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(as.character(data[,varx]) == as.character(data[,vary]))
xbetter <- which(is.na(data[,vary]))
ybetter <- which(is.na(data[,varx]))
data[good,var] <- data[good,varx]
data[xbetter,var] <- data[xbetter,varx]
data[ybetter,var] <- data[ybetter,vary]
}
for(var in varlist){print(var)}
data <- subset(data, select = -c(var))
varlist <- unique( gsub("\\.x|\\.y" , "", colnames(data[,2:ncol(data)]))  )
for(var in varlist){
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(as.character(data[,varx]) == as.character(data[,vary]))
xbetter <- which(is.na(data[,vary]))
ybetter <- which(is.na(data[,varx]))
data[good,var] <- data[good,varx]
data[xbetter,var] <- data[xbetter,varx]
data[ybetter,var] <- data[ybetter,vary]
}
libnew <- ggplot(data, aes(x = election, y = liberal_seat)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, colour = "red")
libnew
libnew <- ggplot(data, aes(x = election, y = liberal_share)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, colour = "red")
libnew
libnew <- ggplot(data, aes(x = election, y = contended)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, colour = "red")
libnew
libnew <- ggplot(data, aes(x = election, y = as.numeric(contended))) +
theme_bw() + geom_smooth()
libnew
libnew <- ggplot(data, aes(x = election, y = as.numeric(contended))) +
theme_bw() + geom_smooth() + labs(y = "Contended election") + geom_vline(xintercept = 1867)
libnew
libnew <- ggplot(seubset(data election < 1882) , aes(x = election, y = as.numeric(contended))) +
libnew
libnew <- ggplot(seubset(data, election < 1882) , aes(x = election, y = as.numeric(contended))) +
theme_bw() + geom_smooth() + labs(y = "Contended election") + geom_vline(xintercept = 1867)
libnew
libnew <- ggplot(seubset(data, election < 1882) , aes(x = election, y = as.numeric(contended))) +
theme_bw() + geom_smooth() + labs(y = "Contended election") + geom_vline(xintercept = 1867)
libnew <- ggplot(subset(data, election < 1882) , aes(x = election, y = as.numeric(contended))) +
theme_bw() + geom_smooth() + labs(y = "Contended election") + geom_vline(xintercept = 1867)
libnew
contendednew <- ggplot(subset(data, election < 1882) , aes(x = election, y = as.numeric(contended))) +
theme_bw() + geom_smooth() + labs(y = "Contended election") + geom_vline(xintercept = 1867)
contendednew
contendednew <- ggplot(subset(data, election < 1882) , aes(x = election, y = as.numeric(contended))) +
theme_bw() + geom_smooth(adjust = 0.1) + labs(y = "Contended election") + geom_vline(xintercept = 1867)
contendednew
contendednew <- ggplot(subset(data, election < 1882) , aes(x = election, y = as.numeric(contended))) +
theme_bw() + geom_smooth(adjust = 3) + labs(y = "Contended election") + geom_vline(xintercept = 1867)
contendednew
require(RCurl)
require(dplyr)
require(stringr)
require(ggplot2)
require(stringdist)
# Loading raw text data
txt_adobe <- read.csv("https://raw.githubusercontent.com/wrathofquan/data-science-fellowship/master/Ross/data/txt_adobe.csv?token=AeHbm0ipWM5CdbLkKOgEqpw0NxSajvcMks5a8RKLwA%3D%3D")
txt_hathi <- read.csv("https://raw.githubusercontent.com/wrathofquan/data-science-fellowship/master/Ross/data/txt_hathi.csv?token=AeHbm56ASPu03KpskHfiK81afM7QcYWqks5a8RKmwA%3D%3D")
txt_gocr <- read.csv("https://raw.githubusercontent.com/wrathofquan/data-science-fellowship/master/Ross/data/txt_gocr.csv?token=AeHbm7Fe_w6VvS8GPQqir8YfMuCmbLIPks5a8RK4wA%3D%3D")
txt_adobe <- txt_adobe[,-1]
txt_hathi <- txt_hathi[,-1]
txt_gocr <- txt_gocr[,-1]
txt_adobe$text <- as.character(txt_adobe$text)
txt_hathi$text <- as.character(txt_hathi$text)
txt_gocr$text <- as.character(txt_gocr$text)
head(txt_adobe[txt_adobe$page == 1 , "text"] )
head(txt_gocr[txt_gocr$page == 26 , "text"] )
nrow(txt_adobe)
nrow(txt_hathi)
txt_adobe <- txt_adobe[grepl("[^[:digit:][:space:]]", txt_adobe$text),]
txt_hathi <- txt_hathi[grepl("[^[:digit:][:space:]]", txt_hathi$text),]
txt_adobe <- txt_adobe[grepl("[^[:punct:][:space:]]", txt_adobe$text),]
txt_hathi <- txt_hathi[grepl("[^[:punct:][:space:]]", txt_hathi$text),]
txt_adobe$rawtext <- txt_adobe$text
txt_hathi$rawtext <- txt_hathi$text
# Dropping strange fractional information
txt_adobe$text <- gsub("\\(.+\\)","", txt_adobe$text)
txt_hathi$text <- gsub("\\(.+\\)","", txt_hathi$text)
txt_adobe$text <- gsub("\\[.+\\]","", txt_adobe$text)
txt_hathi$text <- gsub("\\[.+\\]","", txt_hathi$text)
# Dropping column name rows
txt_adobe <- subset(txt_adobe, !grepl("elect|Elect|Vote|vote|party|Party|Candidate|candidate", txt_adobe$text) )
txt_hathi <- subset(txt_hathi, !grepl("elect|Elect|Vote|vote|party|Party|Candidate|candidate", txt_hathi$text) )
# And any other empty rows
txt_adobe <- txt_adobe[grepl("[^[:digit:][:space:]]", txt_adobe$text),]
txt_hathi <- txt_hathi[grepl("[^[:digit:][:space:]]", txt_hathi$text),]
txt_adobe <- txt_adobe[grepl("[^[:punct:][:space:]]", txt_adobe$text),]
txt_hathi <- txt_hathi[grepl("[^[:punct:][:space:]]", txt_hathi$text),]
# Dropping pesky remaining punctuation
txt_adobe$text <- gsub("[[:punct:]]","",txt_adobe$text)
txt_hathi$text <- gsub("[[:punct:]]","",txt_hathi$text)
require(dplyr)
# Identifying county and # of electors
txt_adobe %>%
group_by(page) %>%
mutate( countyraw = text[1],
seatsraw = text[2]
) %>%
as.data.frame() -> txt_adobe
txt_hathi %>%
group_by(page) %>%
mutate( countyraw = text[1],
seatsraw = text[2]
) %>%
as.data.frame() -> txt_hathi
# Dropping county and seats text
txt_adobe <- subset(txt_adobe, text != countyraw & text != seatsraw , select = -c(seatsraw) )
txt_hathi <- subset(txt_hathi, text != countyraw & text != seatsraw , select = -c(seatsraw) )
# Cleaning county names
txt_adobe$county <- gsub("\\(.+|\\[.+","", txt_adobe$countyraw)
txt_adobe$county <- gsub("{2,}[[:space:]]","", txt_adobe$county)
txt_adobe <- subset(txt_adobe, select = -c(countyraw))
txt_hathi$county <- gsub("\\(.+|\\[.+","", txt_hathi$countyraw)
txt_hathi$county <- gsub("{2,}[[:space:]]","", txt_hathi$county)
txt_hathi <- subset(txt_hathi, select = -c(countyraw))
# Plotting results
head(summary(as.factor(txt_adobe$county)))
# counting the number of columns
txt_adobe$columns <- unlist(lapply( strsplit(txt_adobe$text,"  ") , function(x)  length(x[x != ""]) ))
txt_hathi$columns <- unlist(lapply( strsplit(txt_hathi$text,"  ") , function(x)  length(x[x != ""]) ))
# dropping rows with very few columns
txt_adobe <- subset(txt_adobe, columns > 2 )
txt_hathi <- subset(txt_hathi, columns > 1 )
# Guessing which rows contain years
txt_adobe$text <- gsub("^[[:blank:]]+","",txt_adobe$text)
txt_adobe$elecrow <- grepl("^{3,4}[[:digit:]]", txt_adobe$text) & txt_adobe$columns > 3
txt_hathi$text <- gsub("^[[:blank:]]+","",txt_hathi$text)
txt_hathi$elecrow <- grepl("^{3,4}[[:digit:]]", txt_hathi$text) & txt_hathi$columns > 1
# Generating page/election ids
txt_adobe %>%
group_by(page) %>%
mutate( elecid = page*100 + cumsum(as.numeric(elecrow))  ) %>%
as.data.frame() -> txt_adobe
txt_hathi %>%
group_by(page) %>%
mutate( elecid = page*100 + cumsum(as.numeric(elecrow))  ) %>%
as.data.frame() -> txt_hathi
# Adding guessed election year
txt_adobe %>%
group_by( elecid ) %>%
mutate( election = substr(text[1],1,4) )  %>%
as.data.frame() -> txt_adobe
txt_hathi %>%
group_by( elecid ) %>%
mutate( election = substr(text[1],1,4) )  %>%
as.data.frame() -> txt_hathi
# removing election year from text and dropping bad years
txt_adobe$text[txt_adobe$elecrow] <- gsub("^....","", txt_adobe$text[txt_adobe$elecrow] )
txt_hathi$text[txt_hathi$elecrow] <- gsub("^....","", txt_hathi$text[txt_hathi$elecrow] )
txt_adobe$election <- as.numeric(txt_adobe$election)
txt_adobe$election[txt_adobe$election < 1830 | txt_adobe$election > 1885 ] <- NA
txt_hathi$election <- as.numeric(txt_hathi$election)
txt_hathi$election[txt_hathi$election < 1830 | txt_hathi$election > 1885 ] <- NA
# plotting results
require(ggplot2)
plot_election <- subset(txt_adobe, select = c(election, method))
plot_election <- rbind(plot_election, subset(txt_hathi, select = c(election, method)))
election_year <- ggplot(plot_election, aes(x = election, colour = method )) + geom_density() + theme_bw()
election_year
# Removing cumbersome spaces between numbers
txt_adobe$text <- gsub("(?<=[[:digit:]])[[:blank:]](?=[[:digit:]])","", txt_adobe$text , perl = TRUE )
txt_hathi$text <- gsub("(?<=[[:digit:]])[[:blank:]](?=[[:digit:]])","", txt_hathi$text , perl = TRUE )
# Extracting the number of electors
txt_adobe$text <- gsub("^[[:blank:]]+","",txt_adobe$text)
txt_adobe$has_electors <- grepl("^\\d+",txt_adobe$text )
txt_adobe$electors <- NA
txt_adobe$electors[txt_adobe$has_electors] <- as.numeric(unlist(lapply(strsplit(txt_adobe$text[txt_adobe$has_electors],"  "), "[[",1 )))
txt_adobe$electors[ txt_adobe$electors > 15000 ] <- NA
txt_adobe$text[txt_adobe$has_electors] <- gsub("^[[:digit:]]+","", txt_adobe$text[txt_adobe$has_electors] )
txt_hathi$text <- gsub("^[[:blank:]]+","",txt_hathi$text)
txt_hathi$has_electors <- grepl("^\\d+",txt_hathi$text )
txt_hathi$electors <- NA
txt_hathi$electors[txt_hathi$has_electors] <- as.numeric(unlist(lapply(strsplit(txt_hathi$text[txt_hathi$has_electors],"  "), "[[",1 )))
txt_hathi$electors[ txt_hathi$electors > 15000 ] <- NA
txt_hathi$text[txt_hathi$has_electors] <- gsub("^[[:digit:]]+","", txt_hathi$text[txt_hathi$has_electors] )
# plotting results
require(ggplot2)
plot_electors <- subset(txt_adobe, select = c(electors, method))
plot_electors <- rbind(plot_electors, subset(txt_hathi, select = c(electors, method)))
elector_density <- ggplot(plot_electors, aes(x = electors, colour = method )) + geom_density() + theme_bw()
elector_density
# Extracting the number of votes received by each candidate
txt_adobe$text <- gsub("[[:blank:]]+$","",txt_adobe$text)
txt_adobe$support <- gsub("[[:space:]]","",str_sub( txt_adobe$text, -6, -1 ))
txt_adobe$votes <- as.numeric(txt_adobe$support)
txt_adobe$contended <- !grepl("uno|unopp|opp|Unopp|Unop",txt_adobe$support)
txt_adobe$text <- str_sub( txt_adobe$text, 1, -6 )
txt_adobe$text <- gsub("[[:blank:]]+$","",txt_adobe$text)
txt_hathi$text <- gsub("[[:blank:]]+$","",txt_hathi$text)
txt_hathi$support <- gsub("[[:space:]]","",str_sub( txt_hathi$text, -6, -1 ))
txt_hathi$votes <- as.numeric(txt_hathi$support)
txt_hathi$contended <- !grepl("uno|unopp|opp|Unopp|Unop",txt_hathi$support)
txt_hathi$text <- str_sub( txt_hathi$text, 1, -6 )
txt_hathi$text <- gsub("[[:blank:]]+$","",txt_hathi$text)
# plotting results
require(ggplot2)
contended <- ggplot(txt_adobe, aes(x = election, colour = contended)) + geom_density() + theme_bw() +
geom_vline(xintercept = 1832) + geom_vline(xintercept = 1867)
contended
# Extracting the number of votes received by each candidate
txt_adobe$party <- tolower(str_sub( txt_adobe$text, -1, -1 ))
txt_adobe$text <- str_sub( txt_adobe$text, 1, -2 )
txt_adobe$candidate <- gsub("^[[:blank:]]+|[[:blank:]]+$","",txt_adobe$text)
txt_adobe$party[!grepl("l|c", txt_adobe$party) ] <- NA
txt_hathi$party <- tolower(str_sub( txt_hathi$text, -1, -1 ))
txt_hathi$text <- str_sub( txt_hathi$text, 1, -2 )
txt_hathi$candidate <- gsub("^[[:blank:]]+|[[:blank:]]+$","",txt_hathi$text)
txt_hathi$party[!grepl("l|c", txt_hathi$party) ] <- NA
txt_adobe %>%
group_by(elecid) %>%
summarize( page = page[1],
method = method[1],
county = county[1],
election = election[1],
electors = electors[1],
totalvotes = sum(na.omit(votes)),
contended = contended[1],
unopposed_party = party[contended == FALSE][1],
liberal_votes = sum(na.omit(votes[party == "l"])),
liberal_candidates = sum(na.omit(party == "l")),
candidates = n(),
conservative_votes = sum(na.omit(votes[party == "c"])) ) %>%
as.data.frame() -> data_adobe
data_adobe$liberal_share <- data_adobe$liberal_votes / data_adobe$totalvotes
data_adobe$liberal_seat <- as.numeric( data_adobe$liberal_votes > data_adobe$conservative_votes )
data_adobe$liberal_seat[data_adobe$unopposed_party == "l"] <- 1
txt_hathi %>%
group_by(elecid) %>%
summarize( page = page[1],
method = method[1],
county = county[1],
election = election[1],
electors = electors[1],
totalvotes = sum(na.omit(votes)),
contended = contended[1],
unopposed_party = party[contended == FALSE][1],
liberal_votes = sum(na.omit(votes[party == "l"])),
liberal_candidates = sum(na.omit(party == "l")),
candidates = n(),
conservative_votes = sum(na.omit(votes[party == "c"])) ) %>%
as.data.frame() -> data_hathi
data_hathi$liberal_share <- data_hathi$liberal_votes / data_hathi$totalvotes
data_hathi$liberal_seat <- as.numeric( data_hathi$liberal_votes > data_hathi$conservative_votes )
data_hathi$liberal_seat[data_hathi$unopposed_party == "l"] <- 1
lib <- ggplot(data_adobe, aes(x = election, y = liberal_seat)) +
theme_bw() + geom_smooth() + geom_hline(yintercept = 0.5, type = 2)
lib
# generating variable IDs
data_adobe$merge <- paste( as.character(data_adobe$page), as.character(data_adobe$election), sep = " ")
data_hathi$merge <- paste( as.character(data_hathi$page), as.character(data_hathi$election), sep = " ")
# Mergeing
data <- merge(data_adobe, data_hathi, by = "merge", all = TRUE)
# Checking data quality
test <- ggplot(data, aes(x = log(liberal_votes.x ), y = log(liberal_votes.y ))) + geom_point(alpha = 0.1) + theme_bw()
test
varlist <- unique( gsub("\\.x|\\.y" , "", colnames(data[,2:ncol(data)]))  )
for(var in varlist){
varx <- paste(var, "x", sep = "." )
vary <- paste(var, "y", sep = "." )
data[,var] <- NA
good <- which(as.character(data[,varx]) == as.character(data[,vary]))
xbetter <- which(is.na(data[,vary]))
ybetter <- which(is.na(data[,varx]))
data[good,var] <- data[good,varx]
data[xbetter,var] <- data[xbetter,varx]
data[ybetter,var] <- data[ybetter,vary]
}
contendednew <- ggplot(subset(data, election < 1882) , aes(x = election, y = as.numeric(contended))) +
theme_bw() + geom_smooth() + labs(y = "Contended election") + geom_vline(xintercept = 1867)
contendednew
